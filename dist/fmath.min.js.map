{"version":3,"file":"fmath.min.js","sources":["../src/ts/experiments/endianness.ts","../src/ts/experiments/log2f_approx.ts","../src/wasm/wasm-base64.ts","../src/wasm/wasm.ts","../src/ts/log2.ts","../src/ts/log10.ts"],"sourcesContent":["function isLittleEndian() {\n  const u16 = new Uint16Array(1);\n  u16[0] = 0x1234;\n  const u8 = new Uint8Array(u16.buffer);\n  return u8[0] === 0x34;\n}\n\nexport const HIGH_WORD = isLittleEndian() ? 1 : 0;\n","import { HIGH_WORD } from \"./endianness\";\n\nconst FLOAT64_VIEW = new Float64Array(1);\nconst UINT32_VIEW = new Uint32Array(FLOAT64_VIEW.buffer);\n\nconst BIAS = 0b1111111111;\n\n// Exponent all 0s\nconst CLEAR_EXP_MASK = 0b10000000000011111111111111111111;\n\n// Exponent equal to 1022 (BIAS-1)\nconst SET_EXP_MASK = 0b111111111000000000000000000000;\n\nconst EXP_MASK = 0b1111111111100000000000000000000;\n\n// http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html\nexport function log2f_approx(value: number): number {\n  // A crude replacement for frexpf\n  FLOAT64_VIEW[0] = value;\n  let high = UINT32_VIEW[HIGH_WORD];\n  UINT32_VIEW[HIGH_WORD] = high & CLEAR_EXP_MASK | SET_EXP_MASK;\n  const F = FLOAT64_VIEW[0];\n  const E = ((high & EXP_MASK) >>> 20) - BIAS + 1;\n\n  let Y = 1.23149591368684;\n  Y *= F;\n  Y += -4.11852516267426;\n  Y *= F;\n  Y += 6.02197014179219;\n  Y *= F;\n  Y += -3.13396450166353;\n  Y += E;\n  return Y;\n}","/* eslint-disable */\nexport const base64 = \"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\";","import {base64} from \"./wasm-base64\";\n\nconst buffer = Uint8Array.from(atob(base64), c => c.charCodeAt(0));\nconst mod = new WebAssembly.Module(buffer.buffer);\nconst inst = new WebAssembly.Instance(mod);\nexport const wasm = inst.exports as any;\n","import { log2f_approx as _log2f_approx } from \"./experiments/log2f_approx\";\nimport { wasm } from \"../wasm/wasm\";\n\nexport const wasm_log2_f32: (value: number) => number = wasm.wasm_log2_f32;\nexport const wasm_log2_f64: (value: number) => number = wasm.wasm_log2_f64;\nexport const wasm_log2_libm: (value: number) => number = wasm.wasm_log2_libm;\nexport const wasm_log2f_libm: (value: number) => number = wasm.wasm_log2f_libm;\n\nexport function log2_approx(value: number): number {\n  return wasm_log2_f32(value);\n}\nexport function log2_approx_f64(value: number): number {\n  return wasm_log2_f64(value);\n}\n\nexport function log2f_approx(value: number): number {\n  return _log2f_approx(value)\n}","import { log2_approx } from \"./log2\";\n\nexport function log10_approx(value: number): number {\n  return log2_approx(value) * 0.3010299956639812;\n}"],"names":["isLittleEndian","u16","FLOAT64_VIEW","base64","buffer","c","mod","wasm","wasm_log2_f32","log2_approx","value","log10_approx"],"mappings":"+NAAA,SAASA,GAAiB,CAClB,MAAAC,EAAM,IAAI,YAAY,CAAC,EAC7B,OAAAA,EAAI,CAAC,EAAI,KACE,IAAI,WAAWA,EAAI,MAAM,EAC1B,CAAC,IAAM,EACnB,CAEyBD,EAAe,ECLxC,MAAME,EAAe,IAAI,aAAa,CAAC,EACnB,IAAI,YAAYA,EAAa,MAAM,ECFhD,MAAMC,EAAS,m+DCChBC,EAAS,WAAW,KAAK,KAAKD,CAAM,EAAQE,GAAAA,EAAE,WAAW,CAAC,CAAC,EAC3DC,EAAM,IAAI,YAAY,OAAOF,EAAO,MAAM,EAEnCG,EADA,IAAI,YAAY,SAASD,CAAG,EAChB,QCFZE,EAA2CD,EAAK,cACLA,EAAK,cACJA,EAAK,eACJA,EAAK,gBAExD,SAASE,EAAYC,EAAuB,CACjD,OAAOF,EAAcE,CAAK,CAC5B,CCRO,SAASC,EAAaD,EAAuB,CAC3C,OAAAD,EAAYC,CAAK,EAAI,iBAC9B"}